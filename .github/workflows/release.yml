name: Build TWiLight Menu++ Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm:20200528
    name: "Build with Docker using devKitARM r54"
    outputs:
      commit_tag: ${{ steps.make-cias.outputs.commit_tag }}
      commit_message: ${{ steps.make-cias.outputs.commit_message }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v1
      - name: "Install tools"
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full python jq -y
      - name: "Build TWiLightMenu++"
        run: |
          make package
      - name: "Make booter and TWiLightMenu CIAs"
        id: make-cias
        run: |
          cd booter/
          chmod +x make_cia
          ./make_cia --srl="booter.nds" --id_0=$(git rev-parse --short=7 HEAD) --tikID=$(git rev-parse --short=16 HEAD)
          mkdir -p "../7zfile/3DS - CFW users/"
          cp "booter.cia" "../7zfile/3DS - CFW users/TWiLight Menu.cia"

          cd ../rungame/
          chmod +x make_cia
          ./make_cia --srl="rungame.nds" --id_0=$(git rev-parse --short=7 HEAD) --tikID=$(git rev-parse --short=16 HEAD)
          cp "rungame.cia" "../7zfile/3DS - CFW users/TWiLight Menu - Game booter.cia"

          echo "::set-output name=commit_tag::$(git log --format=%h -1)"
          echo "::set-output name=commit_message::$(git log --pretty=format:'%an - %s' -1)"
      - name: "Make Autoboot files"
        run: |
          cd booter_fc/autoboot/
          cp "../booter_fc.nds" "booter_fc.nds"

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone --depth 1 https://${{ secrets.TWLBOT_TOKEN }}@github.com/DS-Homebrew/DLDI.git

          #### R4 Original & M3 Simply
          cp "booter_fc.nds" "_DS_MENU.nds"
          cp "DLDI/r4_sd.dldi" "r4_sd.dldi"
          ./dlditool r4_sd.dldi _DS_MENU.nds
          ./r4enc _DS_MENU.nds
          mkdir "../../7zfile/Flashcard users/Autoboot/Original R4 & M3 Simply/"
          mv "_DS_MENU.nds.DAT" "../../7zfile/Flashcard users/Autoboot/Original R4 & M3 Simply/_DS_MENU.DAT"

          #### R4i Gold 3DS Plus/R4i Gold 3DS Deluxe/R4i Gold 3DS RTS & R4iDSN/R4 Ultra
          ##### Global
          cp "booter_fc.nds" "_DS_MENU.nds"
          cp "DLDI/r4idsn_sd.dldi" .
          ./dlditool r4idsn_sd.dldi _DS_MENU.nds

          ##### R4iDSN & R4 Ultra specific
          cp "_DS_MENU.nds" "../../7zfile/Flashcard users/Autoboot/R4iDSN & R4 Ultra/_MENU_.NDS"
          cp "_DS_MENU.nds" "../../7zfile/Flashcard users/Autoboot/R4iDSN & R4 Ultra/_MENU_B.NDS"

          ##### R4i Gold 3DS Plus/R4i Gold 3DS Deluxe/R4i Gold 3DS RTS specific
          ./r4enc _DS_MENU.nds
          mkdir "../../7zfile/Flashcard users/Autoboot/R4i Gold 3DS Plus, R4i Gold 3DS Deluxe & R4i Gold 3DS RTS/"
          mv "_DS_MENU.nds.DAT" "../../7zfile/Flashcard users/Autoboot/R4i Gold 3DS Plus, R4i Gold 3DS Deluxe & R4i Gold 3DS RTS/_DS_MENU.DAT"

          #### EZ-Flash 5
          cp "booter_fc.nds" "ez5sys.bin"
          cp "DLDI/EZ5V2.dldi" .
          ./dlditool EZ5V2.dldi ez5sys.bin
          mkdir "../../7zfile/Flashcard users/Autoboot/EZ Flash V/"
          mv "ez5sys.bin" "../../7zfile/Flashcard users/Autoboot/EZ Flash V/ez5sys.bin"

          #### GBAMP + PassMe, FlashMe or WifiMe
          cp "booter_fc.nds" "_BOOT_MP.NDS"
          cp "DLDI/mpcf.dldi" .
          ./dlditool mpcf.dldi _BOOT_MP.NDS
          mkdir "../../7zfile/Flashcard users/Autoboot/GBAMP + PassMe, FlashMe or WifiMe/"
          mv "_BOOT_MP.NDS" "../../7zfile/Flashcard users/Autoboot/GBAMP + PassMe, FlashMe or WifiMe/_BOOT_MP.NDS"

          #### iSmart Premium
          ##### research done entirely by devkitPro
          cp "booter_fc.nds" "ismat.dat"
          cp "DLDI/Mat.dldi" .
          ./dlditool Mat.dldi ismat.dat
          mkdir "../../7zfile/Flashcard users/Autoboot/iSmart Premium/"
          mkdir "../../7zfile/Flashcard users/Autoboot/iSmart Premium/system/"
          mv "ismat.dat" "../../7zfile/Flashcard users/Autoboot/iSmart Premium/system/ismat.dat"

          #### Acekard 2i/Acekard 2.1 & Galaxy Eagle
          cp "booter_fc.nds" "akmenu4.nds"
          cp "DLDI/ak2_sd.dldi" .
          ./dlditool ak2_sd.dldi akmenu4.nds
          cp "akmenu4.nds" "../../7zfile/Flashcard users/Autoboot/Galaxy Eagle/_MENU_.NDS"
          cp "akmenu4.nds" "../../7zfile/Flashcard users/Autoboot/Galaxy Eagle/_MENU_B.NDS"
          mkdir "../../7zfile/Flashcard users/Autoboot/Acekard 2i & Acekard 2.1/"
          mv "akmenu4.nds" "../../7zfile/Flashcard users/Autoboot/Acekard 2i & Acekard 2.1/akmenu4.nds"

          #### Games N Music
          mkdir "../../7zfile/Flashcard users/Autoboot/Games N Music/"

          ##### SDHC but Faster
          cp "booter_fc.nds" "bootme.nds"
          cp "DLDI/gmtf2.dldi" .
          ./dlditool gmtf2.dldi bootme.nds
          mkdir "../../7zfile/Flashcard users/Autoboot/Games N Music/SDHC/"
          mv "bootme.nds" "../../7zfile/Flashcard users/Autoboot/Games N Music/SDHC/bootme.nds"

          ##### Not-SDHC restricted but slower
          cp "booter_fc.nds" "bootme.nds"
          cp "DLDI/gmtf.dldi" .
          ./dlditool gmtf.dldi bootme.nds
          mkdir "../../7zfile/Flashcard users/Autoboot/Games N Music/Non-SDHC/"
          mv "bootme.nds" "../../7zfile/Flashcard users/Autoboot/Games N Music/Non-SDHC/bootme.nds"

          #### SuperCard DSTWO
          cp "booter_fc.nds" "dstwo.nds"
          cp "DLDI/dstwo.dldi" .
          ./dlditool dstwo.dldi dstwo.nds
          mkdir "../../7zfile/Flashcard users/Autoboot/SuperCard DSTWO/"
          mkdir "../../7zfile/Flashcard users/Autoboot/SuperCard DSTWO/_dstwo/"
          mv "dstwo.nds" "../../7zfile/Flashcard users/Autoboot/SuperCard DSTWO/_dstwo/dstwo.nds"

          #### SuperCard DSONE
          ##### not working (tested by DeadSkullzJr)
          # cp "booter_fc.nds" "SCFW.SC"
          # cp "DLDI/dstwo.dldi" .
          # ./dlditool dstwo.dldi SCFW.SC
          # mkdir "../../7zfile/Flashcard users/Autoboot/SuperCard DSONE & SuperCard DSONEi/"
          # mv "SCFW.SC" "../../7zfile/Flashcard users/Autoboot/SuperCard DSONE & SuperCard DSONEi/SCFW.SC"
      - name: "Pack 7z Package for release"
        run: |
          mkdir -p 7zfile/_nds/TWiLightMenu/boxart/
          mkdir -p 7zfile/_nds/TWiLightMenu/extras/
          mkdir -p 7zfile/_nds/TWiLightMenu/gamesettings/

          # nds-bootstrap
          mkdir -p nds-bootstrap
          cd nds-bootstrap
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/ahezard/nds-bootstrap/releases/latest -o nds-bootstrap.json
          curl -L $(jq --raw-output '.assets[0].browser_download_url' nds-bootstrap.json) -o nds-bootstrap.7z
          7z x nds-bootstrap.7z
          mv nds-bootstrap.* ..
          mkdir -p TWiLightMenu
          mv release-bootstrap.ver TWiLightMenu
          cd ..
          curl -L https://github.com/TWLBot/Builds/blob/master/nds-bootstrap.7z?raw=true -o nds-bootstrap.7z
          7z x nds-bootstrap.7z
          mv nds-bootstrap/TWiLightMenu/release-bootstrap.ver 7zfile/_nds/TWiLightMenu
          mv nds-bootstrap/TWiLightMenu/nightly-bootstrap.ver 7zfile/_nds/TWiLightMenu
          mv nds-bootstrap/b4ds-release.nds 7zfile/Flashcard\ users/_nds/
          mv nds-bootstrap/b4ds-nightly.nds 7zfile/Flashcard\ users/_nds/
          mv nds-bootstrap/nds-bootstrap-release.nds 7zfile/_nds/
          mv nds-bootstrap/nds-bootstrap-nightly.nds 7zfile/_nds/
          mv nds-bootstrap/nds-bootstrap-hb-release.nds 7zfile/DSi\&3DS\ -\ SD\ card\ users/_nds/
          mv nds-bootstrap/nds-bootstrap-hb-nightly.nds 7zfile/DSi\&3DS\ -\ SD\ card\ users/_nds/

          # version.txt
          printf "TWiLight Menu++: $(git describe --tags)\nnds-bootstrap: $(jq --raw-output '.tag_name' nds-bootstrap.json)\n\nRocketRobz, ahezard\n" > 7zfile/version.txt

          # Really dumb hidden file that for some reason fixes the releases
          touch 7zfile/.ignoreme

          # Main 7z
          cp -r 7zfile TWiLightMenu
          cd TWiLightMenu
          7z a TWiLightMenu.7z .
          mkdir -p ~/artifacts
          mv TWiLightMenu.7z ~/artifacts

          # DSi 7z
          cp -r DSi\ -\ CFW\ users/SDNAND\ root/* .
          rm -rf DSi\ -\ CFW\ users
          cp -r DSi\&3DS\ -\ SD\ card\ users/* .
          rm -rf DSi\&3DS\ -\ SD\ card\ users
          rm -rf 3DS\ -\ CFW\ users
          rm -rf Flashcard\ users
          7z a TWiLightMenu-DSi.7z
          mv TWiLightMenu-DSi.7z ~/artifacts

          # 3DS 7z
          cd ..
          rm -rf TWiLightMenu
          cp -r 7zfile/ TWiLightMenu/
          cd TWiLightMenu
          cp -r 3DS\ -\ CFW\ users/* .
          rm -rf 3DS\ -\ CFW\ users
          cp -r DSi\&3DS\ -\ SD\ card\ users/* .
          rm -rf DSi\&3DS\ -\ SD\ card\ users
          rm -rf DSi\ -\ CFW\ users
          rm -rf Flashcard\ users
          7z a TWiLightMenu-3DS.7z
          mv TWiLightMenu-3DS.7z ~/artifacts

          # Flashcard 7z
          cd ..
          rm -rf TWiLightMenu
          cp -r 7zfile/ TWiLightMenu/
          cd TWiLightMenu
          cp -r Flashcard\ users/* .
          rm -rf Flashcard\ users
          rm -rf 3DS\ -\ CFW\ users
          rm -rf DSi\&3DS\ -\ SD\ card\ users
          rm -rf DSi\ -\ CFW\ users
          7z a TWiLightMenu-Flashcard.7z
          mv TWiLightMenu-Flashcard.7z ~/artifacts
      - name: "Publish build to GH Actions"
        uses: actions/upload-artifact@v2
        with:
          path: ~/artifacts/*
          name: "build"

  # Only run this for non-PR jobs.
  publish_build_twlbot:
    runs-on: ubuntu-latest
    name: "Publish build to ${{ github.repository }}"
    if: ${{ success() }}
    needs: build
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    outputs:
      current_date: ${{ steps.commit.outputs.current_date }}
      twlbot_commit: ${{ steps.commit.outputs.twlbot_commit }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: "build"
          path: "build"
      - name: Upload to ${{ github.repository }} release
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done

  send_webhook_success:
    runs-on: ubuntu-latest
    needs: [publish_build_twlbot, build]
    name: "Send Discord success webhook"
    if: ${{ success() }}
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commite_tag }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
      CURRENT_DATE: ${{ needs.publish_build_twlbot.outputs.current_date }}
      TWLBOT_COMMIT: ${{ needs.publish_build_twlbot.outputs.twlbot_commit }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v1
      - name: "Send success webhook"
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh success ${{ secrets.WEBHOOK_URL }}

  send_webhook_failure:
    runs-on: ubuntu-latest
    needs: [publish_build_twlbot, build]
    name: "Send Discord failure webhook"
    if: ${{ failure() }}
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commite_tag }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
      CURRENT_DATE: ${{ needs.publish_build_twlbot.outputs.current_date }}
      TWLBOT_COMMIT: ${{ needs.publish_build_twlbot.outputs.twlbot_commit }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v1
      - name: "Send failure webhook"
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh failure ${{ secrets.WEBHOOK_URL }}
